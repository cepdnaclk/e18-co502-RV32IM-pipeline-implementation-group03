$date
	Thu Apr 20 00:52:10 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 1 ! ZERO_OUTPUT $end
$var wire 32 " ALU_RESULT [31:0] $end
$var reg 5 # ALUOP [4:0] $end
$var reg 32 $ DATA1 [31:0] $end
$var reg 32 % DATA2 [31:0] $end
$scope module a $end
$var wire 32 & AND_RESULT [31:0] $end
$var wire 32 ' DATA1 [31:0] $end
$var wire 32 ( DATA2 [31:0] $end
$var wire 32 ) FORWARD_RESULT [31:0] $end
$var wire 32 * OR_RESULT [31:0] $end
$var wire 5 + SELECT [4:0] $end
$var wire 32 , XOR_RESULT [31:0] $end
$var wire 32 - SUB_RESULT [31:0] $end
$var wire 32 . SRL_RESULT [31:0] $end
$var wire 32 / SRA_RESULT [31:0] $end
$var wire 32 0 SLT_RESULT [31:0] $end
$var wire 32 1 SLTU_RESULT [31:0] $end
$var wire 32 2 SLL_RESULT [31:0] $end
$var wire 32 3 REM_RESULT [31:0] $end
$var wire 32 4 REMU_RESULT [31:0] $end
$var wire 32 5 MUL_RESULT [31:0] $end
$var wire 64 6 MULH_RESULT [63:0] $end
$var wire 64 7 MULHU_RESULT [63:0] $end
$var wire 64 8 MULHSU_RESULT [63:0] $end
$var wire 32 9 DIV_RESULT [31:0] $end
$var wire 32 : DIVU_RESULT [31:0] $end
$var wire 32 ; ADD_RESULT [31:0] $end
$var reg 32 < RESULT [31:0] $end
$var reg 1 ! ZERO $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
b0 +
bx *
bx )
b1111101000 (
b1100100 '
bx &
b1111101000 %
b1100100 $
b0 #
bx "
x!
$end
#1
b1110001100 ,
b1111101100 *
b1100000 &
b0 2
b0 .
b0 /
b1100100 )
b1 0
b1 1
#2
b10001001100 "
b10001001100 <
b10001001100 ;
b11111111111111111111110001111100 -
#3
b11000011010100000 5
b11000011010100000 6
b11000011010100000 7
b11000011010100000 8
b0 9
b0 :
b1100100 3
b1100100 4
#4
b11111111111111111111110001111100 "
b11111111111111111111110001111100 <
b1 #
b1 +
#8
b1001110001000 $
b1001110001000 '
#9
b1110001000 &
b1001111101000 *
b1000001100000 ,
b0 0
b0 1
b1001110001000 )
#10
b111110100000 "
b111110100000 <
b1011101110000 ;
b111110100000 -
#11
b10011000100101101000000 5
b10011000100101101000000 6
b10011000100101101000000 7
b10011000100101101000000 8
b101 9
b101 :
b0 3
b0 4
#12
b1110001000 "
b1110001000 <
b1010 %
b1010 (
b1100 $
b1100 '
b10 #
b10 +
#13
b1000 "
b1000 <
b1000 &
b1110 *
b110 ,
b11000000000000 2
b1100 )
#14
b10110 ;
b10 -
#15
b1111000 5
b1111000 6
b1111000 7
b1111000 8
b1 9
b1 :
b10 3
b10 4
#16
b1111000 "
b1111000 <
b1000 #
b1000 +
#20
b0 "
b0 <
b1001 #
b1001 +
#24
b11000000000000 "
b11000000000000 <
b10 %
b10 (
b101 #
b101 +
#25
b110000 "
b110000 <
b0 &
b1110 ,
b110000 2
b11 .
b11 /
#26
b1110 ;
b1010 -
#27
b11000 5
b11000 6
b11000 7
b11000 8
b110 9
b110 :
b0 3
b0 4
#28
b11 "
b11 <
b110 #
b110 +
#32
b110 "
b110 <
b11 %
b11 (
b11111111111111111111111111100111 $
b11111111111111111111111111100111 '
b1100 #
b1100 +
#33
b11 &
b11111111111111111111111111100111 *
b11111111111111111111111111100100 ,
b1 0
b11111111111111111111111111100111 )
b11111111111111111111111100111000 2
b11111111111111111111111111100 .
b11111111111111111111111111111100 /
#34
b11111111111111111111111111101010 ;
b11111111111111111111111111100100 -
#35
b11111111111111111111111111111000 "
b11111111111111111111111111111000 <
b11111111111111111111111110110101 5
b1011111111111111111111111110110101 6
b1011111111111111111111111110110101 7
b1011111111111111111111111110110101 8
b11111111111111111111111111111000 9
b1010101010101010101010101001101 :
b11111111111111111111111111111111 3
#36
b11111111111111111111111111111111 "
b11111111111111111111111111111111 <
b1110 #
b1110 +
#40
b1 "
b1 <
b10000 #
b10000 +
#44
